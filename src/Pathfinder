public class Pathfinder {
	Node[][] nodes;

	public Pathfinder(Map m) {
		nodes = m.getNodes();
	}

	public ArrayList<Node> findPath(Node startNode, Node endNode, int unitRadius) {
		boolean[][] hasChecked = new boolean[nodes.length][nodes[0].length];
		
		LinkedList<Node> open = new LinkedList<Node>(0);
		open.addFirst(startNode);

		while(open.size() > 0) {
			Node temp = open.removeFirst();

			if(temp == endNode) {
				return reconstructPath(temp);
			}

			for(Neighbour neighbour : temp.getNeighbours) {
				if(hasChecked[neighbour.getNode().getY()][neighbour.getNode().getX()])
					continue;

				if(neighbour.getNode().getMaxUnitRadius() < unitRadius)
					continue;

				addSorted(open, neighbour.getNode());
				hasChecked[neighbour.getNode().getY()][neighbour.getNode().getX()] = true;
			}
		}
		
		return new ArrayList<Node>(0);
	}

	private ArrayList<Node> reconstructPath(Node endNode) {
		ArrayList<Node> path = new ArrayList<Node>(0);

		while(endNode != null) {
			path.add(0, endNode);
			endNode = endNode.getParent();
		}
	}

	private void addSorted(LinkedList<Node> array, Node toAdd) {
		for(int i = 0; i < array.size(); i++) {
			if(array.get(i).getF() >= toAdd.getF()) {
				array.add(i, toAdd);
				return;
			}
		}

		array.add(toAdd);
	}
}